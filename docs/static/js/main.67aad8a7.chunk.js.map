{"version":3,"sources":["components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","useState","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","imgs","key","AddCategory","handleAdd","serie","setSerie","onSubmit","e","preventDefault","type","value","onChange","target","GifExpertApp","categories","setCategories","c","ReactDOM","render","document","getElementById"],"mappings":"6MAYeA,EAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAG/B,OAFAC,QAAQC,IAAIJ,EAAIC,EAAOC,GAGpB,yBAAKG,UAAU,SACZ,yBAAKC,IAAKJ,EAAKK,IAAKN,M,uBCPhBO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACVR,EAFc,iDAEkCS,UAAUF,GAF5C,4BACJ,oCAEhBN,QAAQC,IAAIF,GAHQ,SAKDU,MAAMV,GALL,cAKdW,EALc,gBAMGA,EAAKC,OANR,uBAMZC,EANY,EAMZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACpB,MAAO,CACJlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIC,OAAOC,iBAAiBlB,QAXnB,kBAcbc,GAda,4CAAH,sDCuBLK,EAjBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACba,mBAAS,CAChCP,KAAM,GACNQ,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAXAC,qBAAU,WACPlB,EAAQC,GAAUkB,MAAK,SAACT,GAAD,OACpBU,YAAW,WACRH,EAAS,CACNV,KAAMG,EACNK,SAAS,MAEZ,UAEN,CAACd,IAEGe,EDbmBK,CAAapB,GAA/BM,EADuB,EACvBA,KAAMQ,EADiB,EACjBA,QAERO,EAAOf,EAAKE,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAAaa,IAAKb,EAAIlB,IAAQkB,OAC7D,OACG,6BACG,wBAAIb,UAAU,qCAAqCI,GAClDc,GAAW,6CACZ,yBAAKlB,UAAU,cAAcyB,KEWvBE,EAtBK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACVX,mBAAS,IADC,mBAC7BY,EAD6B,KACtBC,EADsB,KAWpC,OACG,0BAAMC,SANY,SAACC,GACnBA,EAAEC,iBACFL,EAAUC,GACVC,EAAS,MAIN,2BAAOI,KAAK,OAAOC,MAAON,EAAOO,SAVlB,SAACJ,GACnBF,EAASE,EAAEK,OAAOF,YCkBTG,EApBM,WAAO,IAAD,EACYrB,mBAAS,IADrB,mBACjBsB,EADiB,KACLC,EADK,KAMxB,OACG,6BACG,4CACA,kBAAC,EAAD,CAAaZ,UAPD,SAACa,GAChBD,EAAc,CAACC,GAAF,mBAAQF,QAOlB,6BACA,4BACIA,EAAW3B,KAAI,SAAC6B,GAAD,OACb,kBAAC,EAAD,CAASf,IAAKe,EAAGrC,SAAUqC,UCZ1CC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.67aad8a7.chunk.js","sourcesContent":["import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n   console.log(id, title, url);\n\n   return (\n      <div className='card '>\n         <img src={url} alt={title} />\n      </div>\n   );\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n   const api_key = '9xVRPx5Ma9ngkVykvtY58XlEwzRCIkUj';\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=${api_key}`;\n   console.log(url);\n\n   const resp = await fetch(url);\n   const { data } = await resp.json();\n   const gifs = data.map((img) => {\n      return {\n         id: img.id,\n         title: img.title,\n         url: img.images.downsized_medium.url,\n      };\n   });\n   return gifs;\n};\n","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n// import PropTypes from 'prop-types';\n\nconst GifGrid = ({ category }) => {\n   const { data, loading } = useFetchGifs(category);\n\n   const imgs = data.map((img) => <GifGridItem key={img.id} {...img} />);\n   return (\n      <div>\n         <h3 className='animate__animated animate__bounce'>{category}</h3>\n         {loading && <p>Aguanta, capo.</p>}\n         <div className='card-grid '>{imgs}</div>\n      </div>\n   );\n};\n\n// GifGrid.propTypes = {\n//    category: PropTypes.string.isRequired,\n// };\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n   const [state, setState] = useState({\n      data: [],\n      loading: true,\n   });\n\n   useEffect(() => {\n      getGifs(category).then((img) =>\n         setTimeout(() => {\n            setState({\n               data: img,\n               loading: false,\n            });\n         }, 500),\n      );\n   }, [category]);\n\n   return state;\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ handleAdd }) => {\n   const [serie, setSerie] = useState('');\n\n   const handleChange = (e) => {\n      setSerie(e.target.value);\n   };\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      handleAdd(serie);\n      setSerie('');\n   };\n   return (\n      <form onSubmit={handleSubmit}>\n         <input type='text' value={serie} onChange={handleChange} />\n      </form>\n   );\n};\n\nAddCategory.propTypes = {\n   handleAdd: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React, { useState } from 'react';\n\nimport GifGrid from './components/GifGrid';\nimport AddCategory from './components/AddCategory';\n\nconst GifExpertApp = () => {\n   const [categories, setCategories] = useState([]);\n   const handleAdd = (c) => {\n      setCategories([c, ...categories]);\n   };\n\n   return (\n      <div>\n         <h2>GifExpertApp</h2>\n         <AddCategory handleAdd={handleAdd} />\n         <hr />\n         <ol>\n            {categories.map((c) => (\n               <GifGrid key={c} category={c} />\n            ))}\n         </ol>\n      </div>\n   );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}